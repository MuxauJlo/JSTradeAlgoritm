//========== * Общие пользовательские настройки стратегии * ===//   
var Deposit = 10.0;	// Размер депозита, который даем боту для торговли
var ProfitSize = 1.0;	// Работает. уровень профина. надо закладывать все комиссии в процентах!!!
var OrdersAmnt = 10;	// Максимальное количество ордеров на покупку. Шаг между ордерами будет расчитан как ширина коридора деленная на этот параметр.
var PercMaxPrice = 1;	// Верхний уровень ценового коридора относительно текущей цены (для режима 1) или суточного максимума (для режима 2) в %.
var PercMinPrice = 1;	// Нижний уровень ценового коридора относительно текущей цены (для режима 1) или суточного максимума (для режима 2) в %.
var MinVolume = 0.01;	// Минимальный объем крипты для сделок. Пока не используется
var vh = 0.01;		// Шаг по цене, если 0, то считается сам исходя из параметров выше
var waitforoid = 100;	// задержка в милисекундах для ожидания получения id ордера
var vround = 0.01;	// До какой велечины делать округление цены!!! должно коррелировать с параметром vh
var vdigit = 2;		// Количество знаков после запятой? должно быть согласовано с предыдущими параметрами
var vfollowtrend = 1.3; // коффициент следования за трендом
//========== * Настрйоки сетки ордеров * ================//	
var Symbol = "BTCUSD";	// требуется для определения ордеров только для этой валюты; Пока не нужный параметр
var Spreading = 10;	// Пока не работает. Распределение профита в фиатную или криптовалютную части депо в %	
var Trading = 'long';	// Пока не работает. Вид торгов. long - на повышение цены, short - на понижение цены, mix - смешаный режим

var DeltaStepOrder = 0.0;	//Пока не работает Увеличение размера шага ордеров при приближении к основанию сетки в %
var OrderMode = 1;	// Режим автонастройки ордеров. 0 - вручную, 1 - по времени от текущей цены, 2 - по max/min суточной цене. Пока работает только 1
var ManualMax = 40;	// Максимальная цена для ручного режима
var ManualMin = 25;	// Минимальнач цена для ручного режима
var WaitRebuild = 30;	// Пока не работает Время про стоя бота без торгов в минутах, после которого будет пересчитана сетка
var StopLoss = 0;	// Пока не работает Если курс будет ниже на эту величину чем цена закупки в партии партия будет слита в минус. Установить равным 0 чтобы не использовать слив в минус.
var СurrentAskPrice = 0; 	// Пока не работает. Всегда 0. Нужна для запоминания и возобновления работы!!! Если 0 - вычисляется текущая, иначе остается та, которая указана.
var СurrentBidPrice = 0; 	// Пока не работает. Всегда 0. Нужна для запоминания и возобновления работы!!! Если 0 - вычисляется текущая, иначе остается та, которая указана.

//=========== * Дальше только для служебного использования * =//
var sVer = '1.2';
var SetOrderDelay = 5; // Пока не работает. Количество секунд между установкой ордеров
var WaitToSetOrder = 1;

var vSoldCount = 0;
var vProfit = 0;

var vfee = trader.get("Fee");

//var vSessionId = trader.StartSessionId();

vflag_over = false;

vflag_buy = false;

vflag_sell = false;

//=========== * Непонятные переменные * ===============//
var botSafeLim2 = 0;
//=========== * Открытые ордера для данного скрипта* =====//
var mOpenOrders = []; 
var mOpenOrders2 = []; 
var mOpenOrders_todel = []; 
var mOpenOrders_toCancel = []; 

//=========== * Ордера для данного скрипта которые открывать не надо* =====//
var mNotOpenOrders = []; 
var mOpenSellOrders = []; 

var mNotOpenOrders_todel = []; 

//=========== * Выполненные ордера для данного скрипта* =====//
var mFilledOrders = []; 

var indexDelete = [];

//============ Пример элемента массива ордеров ======//
var oneOrder = {
	type : 0, // 0 - Покупка,  - продажа
	price : 0,
	volume : 0
}

function newOrder (vid, vtype, vprice, vvolume) {
this.id = vid;
this.type = vtype;
this.price = vprice;
this.volume = vvolume;
}

var SetLastOrder = new Date();
var SetLastOrder2 = new Date();
var MaxPrice = 0;
var MinPrice = 0;
var BuyPart = 0;
var BuySize = 0;

var sellcount = 0;
var oid = 0;


function sleep(ms) {
ms += new Date().getTime();
while (new Date() < ms){}
} 

function MinutesBetween(date1,date2) {
    return  Math.round((((date1 - date2) % 86400000) % 3600000) / 60000);
}

function SecondsBetween(date1,date2) {
    return  Math.round(((((date1 - date2) % 86400000) % 3600000) % 60000) / 1000);
}


function checkOpenOrder(type, price, volume) {
	for (var i = 0; i < trader.get("OpenOrdersCount"); i++) {
		if ((trader.get("OpenOrderType",i) == type)&&(trader.get("OpenOrderPrice",i).toFixed(vdigit) == price.toFixed(vdigit))) {
			return true;
		}
	}
return false;
} 

function checkOpenOrderId(oid) {
	for (var i = 0; i < trader.get("OpenOrdersCount"); i++) {
		if (trader.get("OpenOrderId",i) == oid) {
			return true;
		}
	}
return false;
}

function print_mOpenOrders () {
trader.log("============ Стек открытых ордеров скрипта mOpenOrders ============");
for (var i = 0; i < mOpenOrders.length; i++) {
	trader.log("   ",i,") ", mOpenOrders[i].id, mOpenOrders[i].price, mOpenOrders[i].volume);
}
}

function print_mNotOpenOrders () {
trader.log("============ Стек ордеров скрипта mNotOpenOrders которые не надо открывать ============");
for (var i = 0; i < mNotOpenOrders.length; i++) {
	trader.log("   ",i,") ", mNotOpenOrders[i].id, mNotOpenOrders[i].price, mNotOpenOrders[i].volume);
}
}

function print_mOpenSellOrders () {
trader.log("============ Стек ордеров скрипта mOpenSellOrders ============");
for (var i = 0; i < mOpenSellOrders.length; i++) {
	trader.log("   ",i,") ", mOpenSellOrders[i].id, mOpenSellOrders[i].price, mOpenSellOrders[i].volume);
}
}

function includes_mNotOpenOrders (item) {
var result = false;
for (var i = 0; i < mNotOpenOrders.length; i++) {
	if ((mNotOpenOrders[i].type == item.type)&&(mNotOpenOrders[i].price.toFixed(vdigit) == item.price.toFixed(vdigit))) {
		result = true;
		break;
	}
}
return result;
}

function includes_mNotOpenOrdersId (item) {
var result = false;
for (var i = 0; i < mNotOpenOrders.length; i++) {
	if (mNotOpenOrders[i].id == item.id) {
		result = true;
		break;
	}
}
return result;
}


var asc = function (field) { // функция для сортировки в прямом порядке (по возрастанию)
 return function (x, y) {
   return x[field] > y[field];
 }
};

var desc = function (field) { // функция для сортировки в обратном порядке (по убыванию)
 return function (x, y) {
   return x[field] < y[field];
 }
};


function DataInitialize() {
  trader.log('DataInitialize');
  SetLastOrder = new Date();
  SetLastOrder2 = new Date();
  
  if (СurrentAskPrice == 0) {
  	СurrentAskPrice = trader.get("AskPrice");
	СurrentAskPrice = (СurrentAskPrice.toFixed(vdigit))/1 - vround;
  }
  if (СurrentBidPrice == 0) {
  	СurrentBidPrice  = trader.get("BidPrice");
  }
  switch (OrderMode) {
  case 0: 
	MaxPrice = ManualMax;
	MinPrice = ManualMin;
	break;
  case 1:
	MaxPrice = СurrentAskPrice*(1+PercMaxPrice/100);
	MinPrice =  СurrentBidPrice/(1+PercMinPrice/100);
	break;
  case 2:
	MaxPrice = trader.get("HighPrice")*(1+PercMaxPrice/100);
	MinPrice = trader.get("LowPrice")/(1+PercMinPrice/100);
	break;
  }

  trader.log("СurrentAskPrice = ",СurrentAskPrice);
  trader.log("СurrentBidPrice = ",СurrentBidPrice);
  trader.log("MaxPrice = ",MaxPrice);
  trader.log("MinPrice = ",MinPrice);

  mOpenOrders.length = 0; 
  mNotOpenOrders.length = 0; 
  print_mOpenOrders();
  print_mNotOpenOrders();  
  
}



BuyPart = 100/OrdersAmnt;
BuySize = Deposit*BuyPart/100; // ордера всегда покупаются на данную велечину.
	
DataInitialize();

if (vh == 0) {
	vh = (СurrentAskPrice -  MinPrice)/OrdersAmnt;
}

trader.log("vh (шаг) = ", vh);

vFileExist = false;

if (trader.existDirectory("SaveStateSqript")) {
	if (trader.existFile("SaveStateSqript/State1.txt")) {
		vFileExist = true;
	}
}

vStepFile = 0;

if (vFileExist == false) {
	for (var i = 1; i < OrdersAmnt+1; i++) {
		var vprice = СurrentAskPrice-vh*i;
		if (!checkOpenOrder(0, vprice, BuySize/vprice)) {
			trader.buy(BuySize/vprice,vprice);
			
			sleep(1000);
			oid = trader.get("CurrentOrderID");
			
			if ((oid != -1)&&(oid != -2)) { // Если ордер исполнен сразу, то в массив не пишем
				mOpenOrders.push(new newOrder(oid, 0,vprice,BuySize/vprice)); // Добавление в конец массива
			}
		}
	}
} else {
	// Пробуем разобрать файл. защиты пока не будет. Будем считать что данные в файле верны
	for (var i = 0; i < trader.countLineFile("SaveStateSqript/State1.txt"); i++) {
		vFileStr = trader.readLnFile("SaveStateSqript/State1.txt", i);
		//trader.log("строка файла:", i,vFileStr, vFileStr.length);
		if (vFileStr.length > 1) {
			if (vFileStr.indexOf("mOpenOrders") >=0 ) {
				vStepFile = 1;
				continue;
			}
			if (vFileStr.indexOf("mNotOpenOrders") >= 0) {
				vStepFile = 2;
				continue;
			}
			if (vFileStr.indexOf("mOpenSellOrders") >= 0) {
				vStepFile = 3;
				continue;
			}
			var vArrStr = vFileStr.split(' ');
			switch (vStepFile) {
			case 1:
				mOpenOrders.push(new newOrder(parseFloat(vArrStr[1]), parseFloat(vArrStr[0]),parseFloat(vArrStr[2]),parseFloat(vArrStr[3])));
				break;
			case 2:
				mNotOpenOrders.push(new newOrder(parseFloat(vArrStr[1]), parseFloat(vArrStr[0]),parseFloat(vArrStr[2]),parseFloat(vArrStr[3])));
				break;
			case 3:
				mOpenSellOrders.push(new newOrder(parseFloat(vArrStr[1]), parseFloat(vArrStr[0]),parseFloat(vArrStr[2]),parseFloat(vArrStr[3])));
				break;
			default:
				trader.log("Ошибка в файле состояния");
			}
		}
	}
}

/*double countLineFile(QString name);
double countCharFile(QString name);
QString readFile(QString name, int position,int amount);
QString readLnFile(QString name, int position);*/

print_mOpenOrders();
print_mNotOpenOrders();

vflag_over = true;

var step = 3;

var simpleLock = false;

//trader.EndSessionId(vSessionId);

trader.on("Time").changed()
{
//vSessionId = trader.StartSessionId();
trader.log("time",step);
var vNotFind = false;
if ((step !== undefined)&&(SecondsBetween(new Date(),SetLastOrder) > 15)&&(vflag_over)) {
	if (!simpleLock) {
	simpleLock = true;
	trader.log("step",step);
	trader.log("OpenOrdersCount = ", trader.get("OpenOrdersCount"));
	trader.log("OpenAsksCount = ", trader.get("OpenAsksCount"));
	trader.log("OpenBidsCount = ", trader.get("OpenBidsCount"));
		
	switch (step) {
	case 0:
		var vprice = mOpenOrders[0].price + vh;
		if (trader.get("AskPrice") >= mOpenOrders[0].price + vfollowtrend*vh) { 
			if (trader.get("Balance","USD") > BuySize) {
				if (! includes_mNotOpenOrders (new newOrder(0,0,vprice,BuySize/vprice))) {
					trader.log("Цена покупки больше чем макс цена ордера + vfollowtrend шага");
					trader.log("Текущая цена покупки = ", trader.get("AskPrice"));
					trader.log("mOpenOrders[0].price = ", mOpenOrders[0].price);
					sleep(10*waitforoid);
					trader.log("CancelBid id = ",mOpenOrders[mOpenOrders.length-1].id, mOpenOrders[mOpenOrders.length-1].price, mOpenOrders.length);
					trader.cancelOrder(mOpenOrders[mOpenOrders.length-1].id);
					mOpenOrders_toCancel.unshift(mOpenOrders[mOpenOrders.length-1].id);
					sleep(10*waitforoid);
					var last = mOpenOrders.pop(); // Исключили последний элемент массива	
					
					trader.buy(BuySize/vprice,vprice);
					oid = 0;
					while (oid == 0) {
						sleep(waitforoid);
						oid = trader.get("CurrentOrderID");
					}
					if ((oid != -1)&&(oid != -2)) { // Если ордер исполнен сразу, то в массив не пишем
						mOpenOrders.unshift(new newOrder(oid,0,vprice,BuySize/vprice)); // в начало массива
					} else { // видимо сразу надо открыть ордер на продажу
						trader.log("Error! step 0, oid не получен, oid = ", oid);
					}
					print_mOpenOrders();
					print_mNotOpenOrders();
					print_mOpenSellOrders();
				}
			}
		}
		step = 1;
		break;
	case 1:
		for (var i = 0; i < mOpenOrders.length; i++) {
			var vFind = false;
			//trader.log("OrdersCount = ", trader.get("OpenOrdersCount"));
			for (var j = 0; j < trader.get("OpenOrdersCount") ; j++) {
				//trader.log(mOpenOrders[i].id," = ", trader.get("OpenOrderId",j));
				if (mOpenOrders[i].id == trader.get("OpenOrderId",j)) {
					// Нашли!!!
					vFind = true;
					//trader.log("FIND!!!");
					break;
				}
			}

			if (!vFind) { // Не нашли :(
				// Произошла покупка!!!  - Переписать!!! если покупка произошла нескольких ордеров, то не срабатывает много раз!!! срабатывает 1 раз!!!		
				var lprice = (1 + (ProfitSize-vfee)*0.01)*mOpenOrders[i].price;
				var lvolume = (1 - 0.01*vfee)*mOpenOrders[i].volume - 0.00000001;
				// Если текущая цена продажи больше вычесленного значения, то продаем по ней
				if (trader.get("BidPrice") > lprice) {
					//trader.sell(lvolume,trader.get("BidPrice"));
					lprice = trader.get("BidPrice");
				}
				if (trader.get("Balance","LTC") > lvolume) {
					trader.sell(lvolume,lprice);
					oid = 0;
					while (oid == 0) {
						sleep(waitforoid);
						oid = trader.get("CurrentOrderID");
					}
					if ((oid != -1)&&(oid != -2)) {
						mOpenSellOrders.push(new newOrder(oid, 1, lprice, lvolume));
						mNotOpenOrders.push(new newOrder(mOpenOrders[i].id, mOpenOrders[i].type, mOpenOrders[i].price,mOpenOrders[i].volume)); // в конец массива 
					} else {
						trader.log("Error! step 1, sell oid не получен");
					}
				}
				print_mNotOpenOrders();
				print_mOpenSellOrders();

				trader.log("Цена продажи = ", lprice);
			
				mOpenOrders_todel.push(i);
				trader.log("to del i = ", i);
				
				if (trader.get("Balance","USD") > BuySize) {
					var vprice = mOpenOrders[mOpenOrders.length-1].price - vh*(1+i);
					trader.log ("buy !!! price = ", vprice);
					trader.buy(BuySize/vprice,vprice);
					oid = 0;
					while (oid == 0) {
						sleep(waitforoid);
						oid = trader.get("CurrentOrderID");
					}
					if ((oid != -1)&&(oid != -2)) {
						// добавляем во второй  массив
						mOpenOrders2.push(new newOrder(oid,0,vprice,BuySize/vprice)); // в конец массива
					} else { // скорее всего надо сразу открыть ордер на продажу
						trader.log("Error! step 1, buy oid не получен");
					}
				} else {
					trader.log("Error! step 1 Не хватает денег на покупку. oid = ", oid);
				}
				//print_mOpenOrders();
				vNotFind = true;
			}
		
		}
	
		if (vNotFind) {
			for (var i = 0; i < mOpenOrders_todel.length; i++) {
				trader.log("mOpenOrders.splice(mOpenOrders_todel[i],1);", i, mOpenOrders_todel[i]);
				mOpenOrders.splice(mOpenOrders_todel[i]-i,1);
			} 
			mOpenOrders_todel.length = 0;
		
			for (var i = 0; i < mOpenOrders2.length; i++) {
				trader.log("mOpenOrders.push", i, mOpenOrders2[i].id, mOpenOrders2[i].price, mOpenOrders2[i].volume);
				mOpenOrders.push(new newOrder(mOpenOrders2[i].id, 0,mOpenOrders2[i].price,mOpenOrders2[i].volume)); // в конец массива		
			}
			mOpenOrders2.length = 0;
			// возможно нужна сортировка :)
			mOpenOrders.sort(desc('price'));
			
			print_mOpenOrders();
			print_mNotOpenOrders();
			print_mOpenSellOrders();
		}
		
		step = 2;
		break;
	case 2:
		// Произошла продажа!!! Надо убрать элемент из массива mNotOpenOrders
		for (var i = 0; i < mOpenSellOrders.length; i++) {
			var vFind = false;
			trader.log("OrdersCount = ", trader.get("OpenOrdersCount"));
			for (var j = 0; j < trader.get("OpenOrdersCount") ; j++) {
				//trader.log(mOpenSellOrders[i].id," = ", trader.get("OpenOrderId",j));
				if (mOpenSellOrders[i].id == trader.get("OpenOrderId",j)) {
					// Нашли!!!
					vFind = true;
					//trader.log("FIND!!!");
					break;
				}
			}

			if (!vFind) { // Нашли :)
				trader.log("mNotOpenOrders_todel.push(i)", i);
				mNotOpenOrders_todel.push(i);
				vNotFind = true;
				vSoldCount++;
				vProfit = vProfit + BuySize*(ProfitSize-2*vfee)*0.01;
				trader.log("Количество парных сделок vSoldCount = ", vSoldCount);
				trader.log("Общий профит vProfit = ", vProfit);
			}
		}
	
		if (vNotFind) {
			for (var i = 0; i < mNotOpenOrders_todel.length; i++) {
				trader.log("mNotOpenOrders.splice", i, mNotOpenOrders_todel[i]);
				mNotOpenOrders.splice(mNotOpenOrders_todel[i]-i,1);
				mOpenSellOrders.splice(mNotOpenOrders_todel[i]-i,1);
			} 
			mNotOpenOrders_todel.length = 0;
		
			mNotOpenOrders.sort(desc('price'));
			mOpenSellOrders.sort(desc('price'));
		
			print_mOpenOrders();
			print_mNotOpenOrders();
			print_mOpenSellOrders();
		}
		step = 3;
		break;
	case 3:
		// в данном шаге будет пытаться удалить ордера, которые по каким то причинам не были удалены
		var i2del = -1;
		trader.log("cancelOrderCount = ", mOpenOrders_toCancel.length);
		for (var i = 0; i < mOpenOrders_toCancel.length; i++) {		
			//trader.log("Order:", i, mOpenOrders_toCancel[i]);
			if (checkOpenOrderId(mOpenOrders_toCancel[i])) { // нашли. Пробуем удалить элемент
				trader.log("cancelOrder", i, mOpenOrders_toCancel[i]);
				trader.cancelOrder(mOpenOrders_toCancel[i]);
			} else {
				i2del = i;
			}
			// удаляем 1 элемент
			if (i != -1) {
				mOpenOrders_toCancel.splice(i2del,1);
				trader.log("mOpenOrders_toCancel.splice", i2del);
			}
		}
		step = 4;
		break;
	case 4:
		if (!trader.existDirectory("SaveStateSqript")) {
			trader.CreateDirectory("SaveStateSqript");
		}
		if (!trader.existFile("SaveStateSqript/State1.txt")) {
			trader.CreateFile("SaveStateSqript/State1.txt");
		} else {
			trader.clearFile("SaveStateSqript/State1.txt");
		}
		trader.appendFile("SaveStateSqript/State1.txt","mOpenOrders" + String.fromCharCode(13) + String.fromCharCode(10));
		for (var i = 0; i< mOpenOrders.length; i++) {
			trader.appendFile("SaveStateSqript/State1.txt", mOpenOrders[i].type.toString() + " " + mOpenOrders[i].id.toString() + " " + mOpenOrders[i].price.toFixed(8) + " " + mOpenOrders[i].volume.toFixed(8) + String.fromCharCode(13) + String.fromCharCode(10));
		}
		trader.appendFile("SaveStateSqript/State1.txt","mNotOpenOrders" + String.fromCharCode(13) + String.fromCharCode(10));
		for (var i = 0; i< mNotOpenOrders.length; i++) {
			trader.appendFile("SaveStateSqript/State1.txt", mNotOpenOrders[i].type.toString() + " " + mNotOpenOrders[i].id.toString() + " " + mNotOpenOrders[i].price.toFixed(8) + " " + mNotOpenOrders[i].volume.toFixed(8) + String.fromCharCode(13) + String.fromCharCode(10));
		}	
		trader.appendFile("SaveStateSqript/State1.txt","mOpenSellOrders" + String.fromCharCode(13) + String.fromCharCode(10));
		for (var i = 0; i< mOpenSellOrders.length; i++) {
			trader.appendFile("SaveStateSqript/State1.txt", mOpenSellOrders[i].type.toString() + " " + mOpenSellOrders[i].id.toString() + " " + mOpenSellOrders[i].price.toFixed(8) + " " + mOpenSellOrders[i].volume.toFixed(8) + String.fromCharCode(13) + String.fromCharCode(10));
		}
		trader.log("saved!");
		step = 0;
		break;
	case 5:
		step = 6;
		break;
	case 6:
		
		step = 7;
		break;
	case 7:
		//sleep(1000);
		step = 0;
		break;
	}
	simpleLock = false;
	}
}
//trader.EndSessionId(vSessionId);
}

/*trader.on("ScriptClose").changed() {
	if (!trader.existDirectory("SaveStateSqript")) {
		trader.CreateDirectory("SaveStateSqript");
	}
	if (!trader.existFile("SaveStateSqript/State1.txt")) {
		trader.CreateFile("SaveStateSqript/State1.txt");
	} else {
		trader.clearFile("SaveStateSqript/State1.txt");
	}
	trader.appendFile("SaveStateSqript/State1.txt","mOpenOrders" + String.fromCharCode(13) + String.fromCharCode(10));
	for (var i = 0; i< mOpenOrders.length; i++) {
		trader.appendFile("SaveStateSqript/State1.txt", mOpenOrders[i].type.toString() + " " + mOpenOrders[i].id.toString() + " " + mOpenOrders[i].price.toFixed(8) + " " + mOpenOrders[i].volume.toFixed(8) + String.fromCharCode(13) + String.fromCharCode(10));
	}
	trader.appendFile("SaveStateSqript/State1.txt","mNotOpenOrders" + String.fromCharCode(13) + String.fromCharCode(10));
	for (var i = 0; i< mNotOpenOrders.length; i++) {
		trader.appendFile("SaveStateSqript/State1.txt", mNotOpenOrders[i].type.toString() + " " + mNotOpenOrders[i].id.toString() + " " + mNotOpenOrders[i].price.toFixed(8) + " " + mNotOpenOrders[i].volume.toFixed(8) + String.fromCharCode(13) + String.fromCharCode(10));
	}	
	trader.appendFile("SaveStateSqript/State1.txt","mOpenSellOrders" + String.fromCharCode(13) + String.fromCharCode(10));
	for (var i = 0; i< mOpenSellOrders.length; i++) {
		trader.appendFile("SaveStateSqript/State1.txt", mOpenSellOrders[i].type.toString() + " " + mOpenSellOrders[i].id.toString() + " " + mOpenSellOrders[i].price.toFixed(8) + " " + mOpenSellOrders[i].volume.toFixed(8) + String.fromCharCode(13) + String.fromCharCode(10));
	}
	trader.log("saved!");
}*/
